{"ast":null,"code":"import invariant from 'invariant';\nexport var BluetoothEvent;\n\n(function (BluetoothEvent) {\n  BluetoothEvent[\"onAvailabilityChanged\"] = \"onavailabilitychanged\";\n  BluetoothEvent[\"onGATTServerDisconnected\"] = \"ongattserverdisconnected\";\n  BluetoothEvent[\"onCharacteristicValueChanged\"] = \"oncharacteristicvaluechanged\";\n  BluetoothEvent[\"onServiceAdded\"] = \"onserviceadded\";\n  BluetoothEvent[\"onServiceChanged\"] = \"onservicechanged\";\n  BluetoothEvent[\"onServiceRemoved\"] = \"onserviceremoved\";\n})(BluetoothEvent || (BluetoothEvent = {}));\n\nlet platformListeners = {};\nexport const isCapable = ('bluetooth' in navigator);\n/* TODO: Bacon: Web: This will show a modal and allow you to select one. We may need to build a custom component to do this on native. */\n\nexport async function requestDeviceAsync(options = {\n  acceptAllDevices: true\n}) {\n  try {\n    const device = await platformModule().requestDevice(options);\n    return {\n      type: 'success',\n      device\n    };\n  } catch (error) {\n    if (error.code === 8) {\n      // User Cancelled\n      return {\n        type: 'cancel'\n      };\n    }\n\n    throw error;\n  }\n}\nexport async function getAvailabilityAsync() {\n  const bluetooth = platformModule();\n\n  if (bluetooth.getAvailability) {\n    return await platformModule().getAvailability();\n  } else {\n    return !!bluetooth;\n  }\n}\nexport function getReferringDevice() {\n  return platformModule().referringDevice;\n}\nexport function addPlatformHandler(eventName, handler) {\n  if (!(eventName in platformListeners)) {\n    platformListeners[eventName] = [];\n  }\n\n  platformListeners[eventName].push(handler);\n  return {\n    remove() {\n      const index = platformListeners[eventName].indexOf(handler);\n\n      if (index !== -1) {\n        platformListeners[eventName].splice(index, 1);\n      }\n    }\n\n  };\n}\n/* In theory these event listeners shouldn't matter */\n// type: 'availabilitychanged'\n\nexport function addEventListener(listener, useCapture) {\n  platformModule().addEventListener('availabilitychanged', listener, useCapture);\n}\nexport function dispatchEvent(event) {\n  return platformModule().dispatchEvent(event);\n}\nexport function removeEventListener(callback, options) {\n  platformModule().removeEventListener('availabilitychanged', callback, options);\n}\n\nfunction platformModule() {\n  const _navigator = navigator;\n  invariant(_navigator.bluetooth, 'This device is not capable of using Bluetooth');\n  return _navigator.bluetooth;\n}\n\nfunction _setupHandlers() {\n  const events = [BluetoothEvent.onAvailabilityChanged, BluetoothEvent.onGATTServerDisconnected, BluetoothEvent.onCharacteristicValueChanged, BluetoothEvent.onServiceAdded, BluetoothEvent.onServiceChanged, BluetoothEvent.onServiceRemoved];\n\n  for (const eventName of events) {\n    /* This could be messy if the developer redefines these values */\n    platformModule()[eventName] = (...event) => {\n      const subscriptions = platformListeners[eventName];\n\n      for (const subscription of subscriptions) {\n        subscription(...event);\n      }\n    };\n  }\n}\n\n_setupHandlers();","map":{"version":3,"sources":["C:/Users/Gerson/Desktop/programming/react/dashboard/node_modules/react-bluetooth/build/Bluetooth.js"],"names":["invariant","BluetoothEvent","platformListeners","isCapable","navigator","requestDeviceAsync","options","acceptAllDevices","device","platformModule","requestDevice","type","error","code","getAvailabilityAsync","bluetooth","getAvailability","getReferringDevice","referringDevice","addPlatformHandler","eventName","handler","push","remove","index","indexOf","splice","addEventListener","listener","useCapture","dispatchEvent","event","removeEventListener","callback","_navigator","_setupHandlers","events","onAvailabilityChanged","onGATTServerDisconnected","onCharacteristicValueChanged","onServiceAdded","onServiceChanged","onServiceRemoved","subscriptions","subscription"],"mappings":"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","sourcesContent":["import invariant from 'invariant';\nexport var BluetoothEvent;\n(function (BluetoothEvent) {\n    BluetoothEvent[\"onAvailabilityChanged\"] = \"onavailabilitychanged\";\n    BluetoothEvent[\"onGATTServerDisconnected\"] = \"ongattserverdisconnected\";\n    BluetoothEvent[\"onCharacteristicValueChanged\"] = \"oncharacteristicvaluechanged\";\n    BluetoothEvent[\"onServiceAdded\"] = \"onserviceadded\";\n    BluetoothEvent[\"onServiceChanged\"] = \"onservicechanged\";\n    BluetoothEvent[\"onServiceRemoved\"] = \"onserviceremoved\";\n})(BluetoothEvent || (BluetoothEvent = {}));\nlet platformListeners = {};\nexport const isCapable = 'bluetooth' in navigator;\n/* TODO: Bacon: Web: This will show a modal and allow you to select one. We may need to build a custom component to do this on native. */\nexport async function requestDeviceAsync(options = { acceptAllDevices: true }) {\n    try {\n        const device = await platformModule().requestDevice(options);\n        return { type: 'success', device };\n    }\n    catch (error) {\n        if (error.code === 8) {\n            // User Cancelled\n            return { type: 'cancel' };\n        }\n        throw error;\n    }\n}\nexport async function getAvailabilityAsync() {\n    const bluetooth = platformModule();\n    if (bluetooth.getAvailability) {\n        return await platformModule().getAvailability();\n    }\n    else {\n        return !!bluetooth;\n    }\n}\nexport function getReferringDevice() {\n    return platformModule().referringDevice;\n}\nexport function addPlatformHandler(eventName, handler) {\n    if (!(eventName in platformListeners)) {\n        platformListeners[eventName] = [];\n    }\n    platformListeners[eventName].push(handler);\n    return {\n        remove() {\n            const index = platformListeners[eventName].indexOf(handler);\n            if (index !== -1) {\n                platformListeners[eventName].splice(index, 1);\n            }\n        },\n    };\n}\n/* In theory these event listeners shouldn't matter */\n// type: 'availabilitychanged'\nexport function addEventListener(listener, useCapture) {\n    platformModule().addEventListener('availabilitychanged', listener, useCapture);\n}\nexport function dispatchEvent(event) {\n    return platformModule().dispatchEvent(event);\n}\nexport function removeEventListener(callback, options) {\n    platformModule().removeEventListener('availabilitychanged', callback, options);\n}\nfunction platformModule() {\n    const _navigator = navigator;\n    invariant(_navigator.bluetooth, 'This device is not capable of using Bluetooth');\n    return _navigator.bluetooth;\n}\nfunction _setupHandlers() {\n    const events = [\n        BluetoothEvent.onAvailabilityChanged,\n        BluetoothEvent.onGATTServerDisconnected,\n        BluetoothEvent.onCharacteristicValueChanged,\n        BluetoothEvent.onServiceAdded,\n        BluetoothEvent.onServiceChanged,\n        BluetoothEvent.onServiceRemoved,\n    ];\n    for (const eventName of events) {\n        /* This could be messy if the developer redefines these values */\n        platformModule()[eventName] = (...event) => {\n            const subscriptions = platformListeners[eventName];\n            for (const subscription of subscriptions) {\n                subscription(...event);\n            }\n        };\n    }\n}\n_setupHandlers();\n//# sourceMappingURL=Bluetooth.js.map"]},"metadata":{},"sourceType":"module"}